select <- order(rowMeans(counts(dds,normalized=TRUE)),
decreasing=TRUE)[1:20]
meanSdPlot(assay(vsd))
meanSdPlot(assay(rld))
select <- order(rowMeans(counts(dds,normalized=TRUE)),decreasing=TRUE)[1:20]
dds <- DESeq(dds)
select <- order(rowMeans(counts(dds,normalized=TRUE)),decreasing=TRUE)[1:20]
df <- as.data.frame(colData(dds)[,c("condition","type")])
pheatmap(assay(ntd)[select,], cluster_rows=FALSE, show_rownames=FALSE,
cluster_cols=FALSE, annotation_col=df)
pasCts <- system.file("extdata",
"pasilla_gene_counts.tsv",
package="pasilla", mustWork=TRUE)
pasAnno <- system.file("extdata",
"pasilla_sample_annotation.csv",
package="pasilla", mustWork=TRUE)
cts <- as.matrix(read.csv(pasCts,sep="\t",row.names="gene_id"))
coldata <- read.csv(pasAnno, row.names=1)
coldata <- coldata[,c("condition","type")]
rownames(coldata) <- sub("fb", "", rownames(coldata))
all(rownames(coldata) %in% colnames(cts))
all(rownames(coldata) == colnames(cts))
cts <- cts[, rownames(coldata)]
all(rownames(coldata) == colnames(cts))
coldata
head(cts)
library("DESeq2")
dds <- DESeqDataSetFromMatrix(countData = cts,
colData = coldata,
design = ~ condition)
dds
keep <- rowSums(counts(dds)) >= 10
dds <- dds[keep,]
dds <- DESeq(dds)
res <- results(dds)
vsd <- vst(dds, blind=FALSE)
rld <- rlog(dds, blind=FALSE)
head(assay(vsd), 3)
ntd <- normTransform(dds)
select <- order(rowMeans(counts(dds,normalized=TRUE)),decreasing=TRUE)[1:20]
df <- as.data.frame(colData(dds)[,c("condition","type")])
pheatmap(assay(ntd)[select,], cluster_rows=FALSE, show_rownames=FALSE,
cluster_cols=FALSE, annotation_col=df)
dds$condition <- factor(dds$condition, levels = c("untreated","treated"))
dds <- DESeq(dds)
res <- results(dds)
ntd <- normTransform(dds)
select <- order(rowMeans(counts(dds,normalized=TRUE)),decreasing=TRUE)[1:20]
df <- as.data.frame(colData(dds)[,c("condition","type")])
pheatmap(assay(ntd)[select,], cluster_rows=FALSE, show_rownames=FALSE,
cluster_cols=FALSE, annotation_col=df)
pheatmap(assay(ntd)[select,], cluster_rows=FALSE, show_rownames=FALSE,
cluster_cols=FALSE, annotation_col=df)
q()
library("pasilla")
pasCts <- system.file("extdata",
"pasilla_gene_counts.tsv",
package="pasilla", mustWork=TRUE)
pasAnno <- system.file("extdata",
"pasilla_sample_annotation.csv",
package="pasilla", mustWork=TRUE)
cts <- as.matrix(read.csv(pasCts,sep="\t",row.names="gene_id"))
coldata <- read.csv(pasAnno, row.names=1)
coldata <- coldata[,c("condition","type")]
library("pasilla")
pasCts <- system.file("extdata",
"pasilla_gene_counts.tsv",
package="pasilla", mustWork=TRUE)
pasAnno <- system.file("extdata",
"pasilla_sample_annotation.csv",
package="pasilla", mustWork=TRUE)
cts <- as.matrix(read.csv(pasCts,sep="\t",row.names="gene_id"))
coldata <- read.csv(pasAnno, row.names=1)
coldata <- coldata[,c("condition","type")]
coldata
rownames(coldata) <- sub("fb", "", rownames(coldata))
all(rownames(coldata) %in% colnames(cts))
all(rownames(coldata) == colnames(cts))
cts <- cts[, rownames(coldata)]
all(rownames(coldata) == colnames(cts))
coldata
all(rownames(coldata) == colnames(cts))
library("DESeq2")
dds <- DESeqDataSetFromMatrix(countData = cts,
colData = coldata,
design = ~ condition)
dds
keep <- rowSums(counts(dds)) >= 10
dds <- dds[keep,]
dds <- DESeq(dds)
res <- results(dds)
ntd <- normTransform(dds)
select <- order(rowMeans(counts(dds,normalized=TRUE)),decreasing=TRUE)[1:20]
df <- as.data.frame(colData(dds)[,c("condition","type")])
pheatmap(assay(ntd)[select,], cluster_rows=FALSE, show_rownames=FALSE,
cluster_cols=FALSE, annotation_col=df)
library("pheatmap")
select <- order(rowMeans(counts(dds,normalized=TRUE)),decreasing=TRUE)[1:20]
df <- as.data.frame(colData(dds)[,c("condition","type")])
pheatmap(assay(ntd)[select,], cluster_rows=FALSE, show_rownames=FALSE,
cluster_cols=FALSE, annotation_col=df)
dds$condition <- factor(dds$condition, levels = c("untreated","treated"))
dds <- DESeq(dds)
res <- results(dds)
ntd <- normTransform(dds)
select <- order(rowMeans(counts(dds,normalized=TRUE)),decreasing=TRUE)[1:20]
df <- as.data.frame(colData(dds)[,c("condition","type")])
pheatmap(assay(ntd)[select,], cluster_rows=FALSE, show_rownames=FALSE,
cluster_cols=FALSE, annotation_col=df)
head(dds)
dat  <- counts(dds, normalized = TRUE)
idx  <- rowMeans(dat) > 1
dat  <- dat[idx, ]
head(dat)
coldata
mod  <- model.matrix(~ dex, colData(dds))
coldata
data("airway")
se <- airway
library("magrittr")
data("airway")
se <- airway
library("airway")
data("airway")
se <- airway
se$dex %<>% relevel("untrt")
se$dex
round( colSums(assay(se)) / 1e6, 1 )
colData(se)
se
assayNames(se)
head(assay(se), 3)
colSums(assay(se))
rowRanges(se)
q()
library(ChIPpeakAnno)
source("https://bioconductor.org/biocLite.R")
library("pathview")
source("http://bioconductor.org/biocLite.R")
library(ChIPpeakAnno)
biocLite("ChIPpeakAnno")
install.packages("CQN")
biocLite("CQN")
library("CQN")
?cqn
install.packages("cqn")
biocLite("cqn")
library(cqn)
data(montgomery.subset)
data(sizeFactors.subset)
data(uCovar)
cqn.subset <- cqn(montgomery.subset, lengths = uCovar$length,
x = uCovar$gccontent, sizeFactors = sizeFactors.subset,
verbose = TRUE)
head(montgomery.subset)
head(sizeFactors())
head(sizeFactors
biocLite("pathview")
head(sizeFactors.subset)
tail(montgomery.subset)
dim(montgomery.subset)
head(uCovar)
head(cqn.subset)
dim(montgomery.subset)
dim(cqn.subset)
head(cqn.subset)
head(sizeFactors.subset)
head(uCovar)
q()
library(clusterProfiler)
library("ChIPseeker")
source("http://bioconductor.org/biocLite.R")
biocLite("clusterProfiler")
biocLite("ChIPseeker")
library("ChIPseeker")
q()
source('http://bioconductor.org/biocLite.R')
biocLite('NMF', siteRepos=c('http://web.cbio.uct.ac.za/~renaud/CRAN'), type='both')
library("CellMix")
biocLite('CellMix', siteRepos = 'acr <- ExpressionMix("GSE20300", verbose = 2)', type='both')
biocLite('CellMix', siteRepos = 'acr <- ExpressionMix("GSE20300", verbose = 2)', type='both')
biocLite("GEOquery")
biocLite("CellMix", siteRepos = "http://web.cbio.uct.ac.za/~renaud/CRAN")
library("CellMix")
acr <- ExpressionMix("GSE20300", verbose = 2)
library("GEOquery")
acr <- ExpressionMix("GSE20300", verbose = 2)
acr <- ExpressionMix("GSE2030)
res <- gedBlood(acr)
profplot(acr,asCBC(res))
acr <- ExpressionMix("GSE2030")
res <- gedBlood(acr)
acr <- ExpressionMix("GSE2030")
q()
q()
source("https://bioconductor.org/biocLite.R")
biocLite("GSVA")
library("GSVA")
p <- 20000 ## number of genes
n <- 30 ## number of samples
nGS <- 100 ## number of gene sets
min.sz <- 10 ## minimum gene set size
max.sz <- 100 ## maximum gene set size
X <- matrix(rnorm(p*n), nrow=p, dimnames=list(1:p, 1:n))
head(X)
gs <- as.list(sample(min.sz:max.sz, size=nGS, replace=TRUE)) ## sample gene set sizes
gs <- lapply(gs, function(n, p) sample(1:p, size=n, replace=FALSE), p) ## sample gene sets
head(gs)
dim(gs)
es.max <- gsva(X, gs, mx.diff=FALSE, verbose=FALSE, parallel.sz=1)
es.dif <- gsva(X, gs, mx.diff=TRUE, verbose=FALSE, parallel.sz=1)
par(mfrow=c(1,2), mar=c(4, 4, 4, 1))
plot(density(as.vector(es.max)), main="Maximum deviation from zero",
+ xlab="GSVA score", lwd=2, las=1, xaxt="n", xlim=c(-0.75, 0.75), cex.axis=0.8)
axis(1, at=seq(-0.75, 0.75, by=0.25), labels=seq(-0.75, 0.75, by=0.25), cex.axis=0.8)
plot(density(as.vector(es.max)), main="Maximum deviation from zero",
+ xlab="GSVA score", lwd=2, las=1, xaxt="n", xlim=c(-0.75, 0.75), cex.axis=0.8)
plot(density(as.vector(es.max)), main="Maximum deviation from zero",
xlab="GSVA score", lwd=2, las=1, xaxt="n", xlim=c(-0.75, 0.75), cex.axis=0.8)
X <- matrix(rnorm(p*n), nrow=p, dimnames=list(1:p, 1:n))
dim(X)
es.max <- gsva(X, gs, mx.diff=FALSE, verbose=FALSE, parallel.sz=1)
plot(density(as.vector(es.max)), main="Maximum deviation from zero",
xlab="GSVA score", lwd=2, las=1, xaxt="n", xlim=c(-0.75, 0.75), cex.axis=0.8)
axis(1, at=seq(-0.75, 0.75, by=0.25), labels=seq(-0.75, 0.75, by=0.25), cex.axis=0.8)
plot(density(as.vector(es.max)), main="Maximum deviation from zero",
xlab="GSVA score", lwd=2, las=1, xaxt="n", xlim=c(-0.75, 0.75), cex.axis=0.8)
plot(density(as.numeric(es.max)), main="Maximum deviation from zero",
xlab="GSVA score", lwd=2, las=1, xaxt="n", xlim=c(-0.75, 0.75), cex.axis=0.8)
es.max <- gsva(X, gs, mx.diff=FALSE, verbose=FALSE, parallel.sz=1)
es.dif <- gsva(X, gs, mx.diff=TRUE, verbose=FALSE, parallel.sz=1)
plot(density(as.vector(es.dif)), main="Difference between largest\npositive and negative deviations",
xlab="GSVA score", lwd=2, las=1, xaxt="n", xlim=c(-0.75, 0.75), cex.axis=0.8)
plot(density(es.dif, main="Difference between largest\npositive and negative deviations",
xlab="GSVA score", lwd=2, las=1, xaxt="n", xlim=c(-0.75, 0.75), cex.axis=0.8)
dcvds
plot(density(as.vector(es.max)), main="Maximum deviation from zero",
xlab="GSVA score", lwd=2, las=1, xaxt="n", xlim=c(-0.75, 0.75), cex.axis=0.8)
plot(density(es.max), main="Maximum deviation from zero",
xlab="GSVA score", lwd=2, las=1, xaxt="n", xlim=c(-0.75, 0.75), cex.axis=0.8)
data <- as.numeric(es.max)
data <- unlist(es.max)
data
plot(density(as.vector(data)), main="Maximum deviation from zero",
xlab="GSVA score", lwd=2, las=1, xaxt="n", xlim=c(-0.75, 0.75), cex.axis=0.8)
axis(1, at=seq(-0.75, 0.75, by=0.25), labels=seq(-0.75, 0.75, by=0.25), cex.axis=0.8)
data2 <- unlist(es.dif)
plot(density(as.vector(data2)), main="Difference between largest\npositive and negative deviations",
xlab="GSVA score", lwd=2, las=1, xaxt="n", xlim=c(-0.75, 0.75), cex.axis=0.8)
axis(1, at=seq(-0.75, 0.75, by=0.25), labels=seq(-0.75, 0.75, by=0.25), cex.axis=0.8)
library(GSEABase)
library(GSVAdata)
biocLite("GSVAdata")
library("GSVAdata")
data(c2BroadSets)
c2BroadSets
library(limma)
library(Biobase)
library(genefilter)
library(RColorBrewer)
library(GSEABase)
library(GSVAdata)
cacheDir <- system.file("extdata", package="GSVA")
cachePrefix <- "cache4vignette_"
file.remove(paste(cacheDir, list.files(cacheDir, pattern=cachePrefix), sep="/"))
data(leukemia)
head(pData(leukemia_eset))
table(leukemia_eset$subtype)
filtered_eset <- nsFilter(leukemia_eset, require.entrez=TRUE, remove.dupEntrez=TRUE,
+ var.func=IQR, var.filter=TRUE, var.cutoff=0.5, filterByQuantile=TRUE,
+ feature.exclude="^AFFX")
filtered_eset <- nsFilter(leukemia_eset, require.entrez=TRUE, remove.dupEntrez=TRUE,
var.func=IQR, var.filter=TRUE, var.cutoff=0.5, filterByQuantile=TRUE,
feature.exclude="^AFFX")
filter.log$numDupsRemoved
filter.log
leukemia_filtered_eset <- filtered_eset$eset
cache(leukemia_es <- gsva(leukemia_filtered_eset, c2BroadSets,
min.sz=10, max.sz=500, verbose=TRUE),
dir=cacheDir, prefix=cachePrefix)
adjPvalueCutoff <- 0.001
logFCcutoff <- log2(2)
design <- model.matrix(~ factor(leukemia_es$subtype))
colnames(design) <- c("ALL", "MLLvsALL")
fit <- lmFit(leukemia_es, design)
fit <- eBayes(fit)
design <- model.matrix(~ factor(leukemia_es$subtype))
colnames(design) <- c("ALL", "MLLvsALL")
browseVignettes("GSVA")
pheatmap::pheatmap(es.max)
p <- 20000    ## number of genes
n <- 30       ## number of samples
nGS <- 100    ## number of gene sets
min.sz <- 10  ## minimum gene set size
max.sz <- 100 ## maximum gene set size
X <- matrix(rnorm(p*n), nrow=p, dimnames=list(1:p, 1:n))
dim(X)
gs <- as.list(sample(min.sz:max.sz, size=nGS, replace=TRUE)) ## sample gene set sizes
gs <- lapply(gs, function(n, p) sample(1:p, size=n, replace=FALSE), p) ## sample gene sets
es.max <- gsva(X, gs, mx.diff=FALSE, verbose=FALSE, parallel.sz=1)
es.dif <- gsva(X, gs, mx.diff=TRUE, verbose=FALSE, parallel.sz=1)
pheatmap::pheatmap(es.max)
q()
library("GSVA")
library(GSEABase)
library(GSVAdata)
library(Biobase)
library(genefilter)
library(limma)
library(RColorBrewer)
data(c2BroadSets)
c2BroadSets
head(names(c2BroadSets))
c2BroadSets[[names(c2BroadSets)[1]]]
cacheDir <- system.file("extdata", package="GSVA")
cachePrefix <- "cache4vignette_"
file.remove(paste(cacheDir,
list.files(cacheDir, pattern=cachePrefix), sep="/"))
data(leukemia)
leukemia_eset
head(pData(leukemia_eset))
table(leukemia_eset$subtype)
filtered_eset <- nsFilter(leukemia_eset, require.entrez=TRUE,
remove.dupEntrez=TRUE,
var.func=IQR, var.filter=TRUE,
var.cutoff=0.5, filterByQuantile=TRUE,
feature.exclude="^AFFX")
filtered_eset
leukemia_filtered_eset <- filtered_eset$eset
leukemia_filtered_eset
exprs(leukemia_filtered_eset)[1:4,1:4]
cache(leukemia_es <- gsva(leukemia_filtered_eset, c2BroadSets,
min.sz=10, max.sz=500, verbose=TRUE),
dir=cacheDir, prefix=cachePrefix)
adjPvalueCutoff <- 0.001
logFCcutoff <- log2(2)
design <- model.matrix(~ factor(leukemia_es$subtype))
colnames(design) <- c("ALL", "MLLvsALL")
design <- model.matrix(~ factor(leukemia_es$subtype))
factor(leukemia_es$subtype)
leukemia_es$subtype
leukemia_es
cache(leukemia_es <- gsva(leukemia_filtered_eset, c2BroadSets,
min.sz=10, max.sz=500, verbose=TRUE),
dir=cacheDir, prefix=cachePrefix)
cache(leukemia_es <- gsva(leukemia_filtered_eset, c2BroadSets,
min.sz=10, max.sz=500, verbose=TRUE),
dir=cacheDir, prefix=cachePrefix)
leukemia_es
leukemia_es$subtype
filtered_eset
leukemia_filtered_eset
filtered_eset
leukemia_filtered_eset <- filtered_eset$eset
leukemia_filtered_eset
exprs(leukemia_filtered_eset)[1:4,1:4]
cache(leukemia_es <- gsva(leukemia_filtered_eset, c2BroadSets,
min.sz=10, max.sz=500, verbose=TRUE),
dir=cacheDir, prefix=cachePrefix)
cache
adjPvalueCutoff <- 0.001
logFCcutoff <- log2(2)
leukemia_es$subtype
factor(leukemia_es$subtype)
model.matrix(~ factor(leukemia_es$subtype))
leukemia_es
design <- model.matrix(~ factor(leukemia_filtered_eset))
filtered_eset
cache(leukemia_es <- gsva(leukemia_filtered_eset, c2BroadSets,
min.sz=10, max.sz=600, verbose=TRUE),
dir=cacheDir, prefix=cachePrefix)
leukemia_es
cache(leukemia_es <- gsva(leukemia_filtered_eset, c2BroadSets,
min.sz=10, max.sz=500, verbose=TRUE),
dir=cacheDir, prefix=cachePrefix)
table(leukemia_eset$subtype)
filtered_eset <- nsFilter(leukemia_eset, require.entrez=TRUE,
remove.dupEntrez=TRUE,
var.func=IQR, var.filter=TRUE,
var.cutoff=0.5, filterByQuantile=TRUE,
feature.exclude="^AFFX")
filtered_eset
logFCcutoff <- log2(2)
design <- model.matrix(~ factor(leukemia_eset$subtype))
colnames(design) <- c("ALL", "MLLvsALL")
fit <- lmFit(leukemia_filtered_eset, design)
fit <- eBayes(fit)
allGenes <- topTable(fit, coef="MLLvsALL", number=Inf)
DEgenes <- topTable(fit, coef="MLLvsALL", number=Inf,
p.value=adjPvalueCutoff, adjust="BH", lfc=logFCcutoff)
res <- decideTests(fit, p.value=adjPvalueCutoff, lfc=logFCcutoff)
summary(res)
data(gbm_VerhaakEtAl)
gbm_eset
exprs(gbm_eset)[1:4,1:4]
exprs(gbm_eset)[1:4,1:4]
ExpressionSet (storageMode: lockedEnvironment)
data(gbm_VerhaakEtAl)
gbm_eset
head(featureNames(gbm_eset))
head(featureNames(gbm_eset))
table(gbm_eset$subtype)
sapply(brainTxDbSets, length)
lapply(brainTxDbSets, head)
data(brainTxDbSets)
sapply(brainTxDbSets, length)
lapply(brainTxDbSets, head)
gbm_es <- gsva(gbm_eset, brainTxDbSets, mx.diff=FALSE, verbose=FALSE, parallel.sz=1)
gbm_eset
exprs(gbm_eset)[1:4,1:4]
data(brainTxDbSets)
brainTxDbSets
canonicalC2BroadSets <- c2BroadSets[c(grep("^KEGG", names(c2BroadSets)),
grep("^REACTOME", names(c2BroadSets)),
grep("^BIOCARTA", names(c2BroadSets)))]
canonicalC2BroadSets
data(genderGenesEntrez)
MSY <- GeneSet(msYgenesEntrez, geneIdType=EntrezIdentifier(),
collectionType=BroadCollection(category="c2"), setName="MSY")
MSY
XiE <- GeneSet(XiEgenesEntrez, geneIdType=EntrezIdentifier(),
collectionType=BroadCollection(category="c2"), setName="XiE")
XiE
canonicalC2BroadSets <- GeneSetCollection(c(canonicalC2BroadSets, MSY, XiE))
canonicalC2BroadSets
myC7 <- getGmt("c7.all.v5.1.entrez.gmt", geneIdType=EntrezIdentifier(), collectionType=BroadCollection(category="c7"), sep="\t")
library("sva")
browseVignettes("sva")
library(zebrafishRNASeq)
data(zfGenes)
filter = apply(zfGenes, 1, function(x) length(x[x>5])>=2)
filtered = zfGenes[filter,]
genes = rownames(filtered)[grep("^ENS", rownames(filtered))]
controls = grepl("^ERCC", rownames(filtered))
group = as.factor(rep(c("Ctl", "Trt"), each=3))
dat0 = as.matrix(filtered)
mod1 = model.matrix(~group)
mod0 = cbind(mod1[,1])
svseq = svaseq(dat0,mod1,mod0,n.sv=1)
plot(svseq,pch=19,col="blue")
q()
shiny::runApp('F:/Shiny/my_shiny/exercise/census-app')
runApp('F:/Shiny/my_shiny/exercise/my_app')
runApp('F:/Shiny/my_shiny/exercise/1')
rm(list=ls())
runApp('F:/Software Application/ColorectalCancer')
runApp('F:/Software Application/ColorectalCancer')
runApp('F:/Software Application/ColorectalCancer')
setwd("F:/Software Application/Lung_cancer")
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
